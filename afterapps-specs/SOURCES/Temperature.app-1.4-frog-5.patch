--- Temperature.app.old/Temperature.cc	2002-04-06 01:44:09.000000000 +0200
+++ Temperature.app/Temperature.cc	2004-12-10 16:23:25.202032048 +0100
@@ -2,6 +2,7 @@
 //  Temperature.app
 // 
 //  Copyright (c) 2000-2002 Per Liden
+//  Copyright (c) 2004 Sven Schaepe
 // 
 //  This program is free software; you can redistribute it and/or modify
 //  it under the terms of the GNU General Public License as published by
@@ -20,18 +21,18 @@
 //
 
 #include <X11/Xlib.h>
-#include <iostream.h>
-#include <fstream.h>
-#include <stdlib.h>
-#include <stdio.h>
-#include <string.h>
-#include <unistd.h>
-#include <signal.h>
-#include <errno.h>
 #include <sys/types.h>
 #include <sys/wait.h>
-#include <math.h>
-#include <time.h>
+#include <iostream>
+#include <fstream>
+#include <cstdlib>
+#include <cstdio>
+#include <string>
+#include <unistd.h>
+#include <csignal>
+#include <cerrno>
+#include <cmath>
+#include <ctime>
 #include "Xpm.h"
 #include "Temperature.h"
 
@@ -61,7 +62,7 @@
    }
 
    if (childStatus == ChildError) {
-      cerr << APPNAME << ": could not fetch temperature (wget failed), try option -V for more information" << endl;
+      std::cerr << APPNAME << ": could not fetch temperature (wget failed), try option -V for more information" << std::endl;
    }
 }
 
@@ -76,11 +77,16 @@
 
    mInstanceName = INSTANCENAME;
    mStationId = 0;
+   mPressure[0] = 0;
    mTemperature[0] = 0;
    mTime[0] = 0;
    mTimeDiff = 0.0;
    mFahrenheit = false;
+   mMPH = false;
    mShowTime = false;
+   mShowPressure = false;
+   mShowWind = false;
+   mShowTemperatureWindChill = false;
    mTime12HourFormat = false;
    mVerbose = false;
 
@@ -106,6 +112,31 @@
             mFahrenheit = true;
          }
 
+         // WindChill
+         else if (!strcmp(argv[i], "-c")) {
+            mShowTemperatureWindChill = true;
+         }
+
+         // Pressure
+         else if (!strcmp(argv[i], "-p")) {
+            mShowPressure = true;
+         }
+
+         // Wind
+         else if (!strcmp(argv[i], "-w")) {
+            mShowWind = true;
+            checkArgument(argv, argc, i);
+            if (!strcmp(argv[i+1], "MPH")) {
+               mMPH = true;
+	    } else if (!strcmp(argv[i+1], "KMH")) {
+               mMPH = false;
+	    } else {
+               std::cerr << APPNAME << ": unknown Speed unit, use MPH or KMH" << std::endl;
+	       exit(0);
+	    }
+            i++;
+         }
+
          // Time
          else if (!strcmp(argv[i], "-t")) {
             mShowTime = true;
@@ -113,7 +144,7 @@
             if (!strcmp(argv[i+1], "12")) {
                mTime12HourFormat = true;
             } else if (strcmp(argv[i+1], "24")) {
-               cerr << APPNAME << ": unknown time format, use 12 or 24" << endl;
+               std::cerr << APPNAME << ": unknown time format, use 12 or 24" << std::endl;
                exit(0);
             }
             i++;
@@ -133,7 +164,7 @@
 
          // Version
          else if (!strcmp(argv[i], "-v")) {
-            cerr << APPNAME << " version " << VERSION << endl;
+            std::cerr << APPNAME << " version " << VERSION << std::endl;
             exit(0);
          }
 
@@ -145,7 +176,7 @@
 
          // Unknown option
          else {
-            cerr << APPNAME << ": invalid option '" << argv[i] << "'" << endl;
+            std::cerr << APPNAME << ": invalid option '" << argv[i] << "'" << std::endl;
             tryHelp(argv[0]);
             exit(0);
          }
@@ -153,14 +184,14 @@
    }
 
    if (mStationId == 0) {
-      cerr << APPNAME << ": you must supply a station id using -s <id>" << endl;
+      std::cerr << APPNAME << ": you must supply a station id using -s <id>" << std::endl;
       tryHelp(argv[0]);
       exit(0);
    }
 
    // Open display
    if ((mDisplay = XOpenDisplay(displayName)) == NULL) {
-      cerr << APPNAME << ": could not open display " << displayName << endl;
+      std::cerr << APPNAME << ": could not open display " << displayName << std::endl;
       exit(0);
    }
  
@@ -227,31 +258,34 @@
 
 void Temperature::tryHelp(char* appname)
 {
-   cerr << endl << "Try `" << appname << " --help' for more information" << endl;
+   std::cerr << std::endl << "Try `" << appname << " --help' for more information" << std::endl;
 }
 
 void Temperature::showHelp() 
 {
-   cerr << APPNAME << " Copyright (c) 2000-2002 by Per Liden (per@fukt.bth.se)" << endl << endl
-        << "options:" << endl
-        << " -s <id>         set station id (ICAO Location Indicator)" << endl
-        << " -t 12|24        display time of temperature observation (12 or 24 hour format)" << endl
-        << " -f              display degrees in Fahrenheit" << endl
-        << " -V              display verbose messages from wget" << endl
-        << " -n <name>       set client instance name" << endl
-        << " -d <disp>       set display" << endl
-        << " -v              print version and exit" << endl
-        << " -h, --help      display this help text and exit" << endl 
-        << endl
-        << "You must supply the ICAO Location Indicator (a 4-character string)" << endl
-        << "of a weather station near you. You can search for a station on" << endl
-        << "this site: http://www.nws.noaa.gov/oso/siteloc.shtml" << endl;
+   std::cerr << APPNAME << " Copyright (c) 2000-2002 by Per Liden (per@fukt.bth.se)" << std::endl << std::endl
+        << "options:" << std::endl
+        << " -s <id>         set station id (ICAO Location Indicator)" << std::endl
+        << " -t 12|24        display time of temperature observation (12 or 24 hour format)" << std::endl
+        << " -w MPH|KMH      display Wind" << std::endl
+        << " -p              display pressure in hPa" << std::endl
+        << " -c              display windchill temperature" << std::endl
+        << " -f              display degrees in Fahrenheit" << std::endl
+        << " -V              display verbose messages from wget" << std::endl
+        << " -n <name>       set client instance name" << std::endl
+        << " -d <disp>       set display" << std::endl
+        << " -v              print version and exit" << std::endl
+        << " -h, --help      display this help text and exit" << std::endl 
+        << std::endl
+        << "You must supply the ICAO Location Indicator (a 4-character string)" << std::endl
+        << "of a weather station near you. You can search for a station on" << std::endl
+        << "this site: http://www.nws.noaa.gov/tg/siteloc.shtml" << std::endl;
 }
 
 void Temperature::checkArgument(char** argv, int argc, int index)
 {
    if (argc-1 < index+1) {
-      cerr << APPNAME << ": option '" << argv[index] << "' requires an argument" << endl;
+      std::cerr << APPNAME << ": option '" << argv[index] << "' requires an argument" << std::endl;
       tryHelp(argv[0]);
       exit(0);
    }
@@ -333,10 +367,23 @@
    sprintf(mTime, "%d:%.2d", hour, min);
 }
 
-bool Temperature::updateTemperture(ifstream& file)
+std::string Temperature::windRose(int angle)
+{
+    if(angle==-1) {
+	return "";
+    }
+    double resolution=360.0/16.0;
+    char *from[]={"N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"};
+    angle%=360;
+    double dAngle=double(angle);
+    int index=(int)rint(dAngle/resolution);
+    return (from[index%16]);
+}
+bool Temperature::updateTemperture(std::ifstream& file)
 {
    const int MAX_LINE = 1024;
    char buffer[MAX_LINE];
+   bool windChill=false;
 
    if (mShowTime) {
       // Find time of observation
@@ -351,42 +398,177 @@
       setTime(time);
    }
    
-   // Find temperature
    while (!file.eof()) {
-      file >> buffer;
-      if (!strcmp(buffer, "Temperature:")) {
-         file >> buffer;
-         if (buffer && strlen(buffer) < 5) {
-            char* unit;
-            if (mFahrenheit) {
-               strcpy(mTemperature, buffer);
-               unit = " °F";
-            } else {
-               sprintf(mTemperature, "%d", (int)rint((atoi(buffer) - 32) / 1.8));
-               unit = " °C";
-            }
-            
-            Xpm* image = new Xpm(mDisplay, mRoot, main_xpm);
-            if (mShowTime) {
-               if (mTime12HourFormat) {
-                  image->drawComposedString(TIME_POS, TIME_FONT, mTime, AMPM_FONT, mTimeAMPM);
-               } else {
-                  image->drawString(TIME_POS, TIME_FONT, mTime);
-               }
-               image->drawComposedString(TEMP_WITH_TIME_POS, TEMP_FONT, mTemperature, UNIT_FONT, unit);
-            } else {
-               image->drawComposedString(TEMP_POS, TEMP_FONT, mTemperature, UNIT_FONT, unit);
-            }
-            image->setWindowPixmap(mIconWin);
-            delete image;
-            XSync(mDisplay, False);
-            return true;
-         }
+      std::string line;
+      getline(file,line);
+      std::string::size_type wordBegin,wordSize=line.find(" ");
+      if(wordSize>line.size()) {
+	wordSize=std::string::npos;
+      }
+      std::string substr=line.substr(0,wordSize);
+      if (!strcmp(substr.c_str(),"Wind:") && mShowWind) {
+	  wordBegin=wordSize+1;
+	  wordSize=line.find("degrees)",wordBegin);
+	  int angle=-1;
+	  if(wordSize<=line.size()) {
+	      wordSize=line.find("(",wordBegin);
+	      if(wordSize>line.size()) {
+		wordSize=std::string::npos;
+	      }
+	      wordBegin=wordSize+1;
+	      wordSize=line.find(" ",wordBegin);
+	      if(wordSize>line.size()) {
+		wordSize=std::string::npos;
+	      }
+	      substr=line.substr(wordBegin,wordSize-wordBegin);
+	      sscanf(substr.c_str(),"%d",&angle);
+	      wordBegin=wordSize+1;
+	  }
+	  wordSize=line.find("KT)",wordBegin);
+	  int speed=0;
+	  if(wordSize<=line.size()) {
+	      wordSize=line.find("(",wordBegin);
+	      if(wordSize>line.size()) {
+		wordSize=std::string::npos;
+	      }
+	      wordBegin=wordSize+1;
+	      wordSize=line.find(" ",wordBegin);
+	      if(wordSize>line.size()) {
+		wordSize=std::string::npos;
+	      }
+	      substr=line.substr(wordBegin,wordSize-wordBegin);
+	      sscanf(substr.c_str(),"%d",&speed);
+	  }
+	  if(mMPH) {
+	      snprintf(mWind,sizeof(mWind),"%s %0.1f",windRose(angle).c_str(),0.5144444/0.44704 * (double)speed);
+	      strncpy(mWindUnit," MPH",sizeof(mWindUnit));
+	  } else {
+	      snprintf(mWind,sizeof(mWind),"%s %0.1f",windRose(angle).c_str(),0.5144444/0.2777778 * (double)speed);
+	      strncpy(mWindUnit," kmh",sizeof(mWindUnit));
+	  }
+      } else if (!strcmp(substr.c_str(),"Pressure") && mShowPressure) {
+	  wordBegin=wordSize+1;
+	  wordSize=line.find(" ",wordBegin);
+	  if(wordSize>line.size()) {
+	    wordSize=std::string::npos;
+	  }
+	  substr=line.substr(wordBegin,wordSize-wordBegin);
+	  if (!strcmp(substr.c_str(),"(altimeter):")) {
+	      wordBegin=wordSize+1;
+	      wordSize=line.find(" ",wordBegin);
+	      if(wordSize>line.size()) {
+		wordSize=std::string::npos;
+	      }
+	      substr=line.substr(wordBegin,wordSize-wordBegin);
+	      double pressure;
+	      sscanf(substr.c_str(),"%lf",&pressure);
+	      snprintf(mPressure,sizeof(mPressure),"%d", (int)rint(pressure*33.85));
+	      strncpy(mPressureUnit," hPa",sizeof(mPressureUnit));
+	 }
+      } else if (!strcmp(substr.c_str(),"Windchill:") && mShowTemperatureWindChill) {
+	  windChill=true;
+	  wordBegin=wordSize+1;
+	  wordSize=line.find(" ",wordBegin);
+	  if(wordSize>line.size()) {
+	    wordSize=std::string::npos;
+	  }
+	  substr=line.substr(wordBegin,wordSize-wordBegin);
+	  strncpy(mTemperatureWindChill, substr.c_str(),sizeof(mTemperatureWindChill));
+	  if (!mFahrenheit) {
+	    snprintf(mTemperatureWindChill,sizeof(mTemperatureWindChill), "%d", (int)rint((atoi(substr.c_str()) - 32) / 1.8));
+	  }
+      } else if (!strcmp(substr.c_str(),"Temperature:")) {
+	  wordBegin=wordSize+1;
+	  wordSize=line.find(" ",wordBegin);
+	  if(wordSize>line.size()) {
+	    wordSize=std::string::npos;
+	  }
+	  substr=line.substr(wordBegin,wordSize-wordBegin);
+	  strncpy(mTemperature, substr.c_str(),sizeof(mTemperature));
+	  if (mFahrenheit) {
+	    strncpy(mTemperatureUnit," °F",sizeof(mTemperatureUnit));
+	  } else {
+	    snprintf(mTemperature,sizeof(mTemperature), "%d", (int)rint((atoi(substr.c_str()) - 32) / 1.8));
+	    strncpy(mTemperatureUnit," °C",sizeof(mTemperatureUnit));
+	  }
       }
    }
-
-   cerr << APPNAME << ": could not fetch temperature (unknown file format)" << endl;
-   return false;
+    Xpm* image = new Xpm(mDisplay, mRoot, main_xpm);
+    int  dtmp=0;
+    int  utmp=0;
+    bool dOdd=false;
+    bool uOdd=false;
+    if(mShowWind) {
+	int pos=POS;
+	if(dOdd) {
+	    pos+=dtmp;
+	    dOdd=false;
+	} else {
+	    pos+=dtmp;
+	    dtmp+=10;
+	    dOdd=true;
+	}
+	image->drawComposedString(pos, AMPM_FONT, mWind, AMPM_FONT, mWindUnit);
+    }
+    if(mShowPressure) {
+	if(!utmp && dtmp) {
+	    utmp=10;
+	}
+	int pos=POS;
+	if(uOdd) {
+	    pos-=utmp;
+	    uOdd=false;
+	} else {
+	    pos-=utmp;
+	    utmp+=10;
+	    uOdd=true;
+	}
+	image->drawComposedString(pos, AMPM_FONT, mPressure, AMPM_FONT, mPressureUnit);
+    }
+    if (mShowTime) {
+	if(utmp && !dtmp) {
+	    dtmp=10;
+	}
+	int pos=POS;
+	if(dOdd) {
+	    pos+=dtmp;
+	    dOdd=false;
+	} else {
+	    pos+=dtmp;
+	    dtmp+=10;
+	    dOdd=true;
+	}
+       if (mTime12HourFormat) {
+	  image->drawComposedString(pos, AMPM_FONT, mTime, AMPM_FONT, mTimeAMPM);
+       } else {
+	  image->drawString(pos, AMPM_FONT, mTime);
+       }
+    }
+    if (mShowTemperatureWindChill && windChill) {
+	char tmp[sizeof(mTemperatureUnit)];
+	strcpy(tmp,mTemperatureUnit);
+	snprintf(mTemperatureUnit,sizeof(mTemperatureUnit),"/%s%s",mTemperatureWindChill,tmp);
+	windChill=false;
+    }
+    if(true) {
+	if(!utmp && dtmp) {
+	    utmp=10;
+	}
+	int pos=POS;
+	if(uOdd) {
+	    pos-=utmp;
+	    uOdd=false;
+	} else {
+	    pos-=utmp;
+	    utmp+=10;
+	    uOdd=true;
+	}
+	image->drawComposedString(pos, TEMP_FONT, mTemperature, TIME_FONT, mTemperatureUnit);
+    }
+    image->setWindowPixmap(mIconWin);
+    delete image;
+    XSync(mDisplay, False);
+    return true;
 }
 
 void Temperature::run() 
@@ -401,7 +583,7 @@
          char tmpFile[sizeof(TMP_FILE)] = TMP_FILE;
          int fd = mkstemp(tmpFile);
          if (fd == -1) {
-            cerr << APPNAME << ": could not create temporary file " << tmpFile << ": " << strerror(errno) << endl;
+            std::cerr << APPNAME << ": could not create temporary file " << tmpFile << ": " << strerror(errno) << std::endl;
             exit(1);
          }
          close(fd);
@@ -416,11 +598,11 @@
             char* URL = new char[strlen(METAR_URL) + strlen(mStationId) + 1];
             sprintf(URL, METAR_URL, mStationId);
             execlp("wget", "wget", "--cache=off", "--tries=0", verbose, "-O", tmpFile, URL, 0);
-            cerr << APPNAME << ": could not fetch temperature (wget not found in $PATH)" << endl;
+            std::cerr << APPNAME << ": could not fetch temperature (wget not found in $PATH)" << std::endl;
             remove(tmpFile);
             exit(0);
          } else if (pid == -1) {
-            cerr << APPNAME << ": could not fetch temperature (fork() failed)" << endl;
+            std::cerr << APPNAME << ": could not fetch temperature (fork() failed)" << std::endl;
          } else {
             bool toggle = true;
             while (childStatus == ChildRunning) {
@@ -430,7 +612,7 @@
             }
             showLed(true);
             if (childStatus == ChildDone) {
-               ifstream file(tmpFile);
+               std::ifstream file(tmpFile);
                if (file) {
                   if (updateTemperture(file)) {
                      showLed(false);
diff -Nur Temperature.app-1.4/Temperature.h Temperature.app-1.4-frog/Temperature.h
--- Temperature.app-1.4/Temperature.h	2002-04-06 01:44:17.000000000 +0200
+++ Temperature.app-1.4-frog/Temperature.h	2004-12-10 16:26:07.284391784 +0100
@@ -2,6 +2,7 @@
 //  Temperature.app
 // 
 //  Copyright (c) 2000-2002 Per Liden
+//  Copyright (c) 2004 Sven Schaepe
 // 
 //  This program is free software; you can redistribute it and/or modify
 //  it under the terms of the GNU General Public License as published by
@@ -22,18 +23,17 @@
 #ifndef _TEMPERATURE_H_
 #define _TEMPERATURE_H_
 
-#include <fstream.h>
 #include <X11/Xlib.h>
+#include <fstream>
+#include <string>
 
 #define APPNAME                 "Temperature.app"
-#define VERSION                 "1.4"
+#define VERSION                 "1.4.5"
 #define INSTANCENAME            "temperature_app"
 #define CLASSNAME               "Temperature_app"
 #define METAR_URL               "http://weather.noaa.gov/pub/data/observations/metar/decoded/%s.TXT"
 #define UPDATE_INTERVAL         900
-#define TIME_POS                22
-#define TEMP_POS                35
-#define TEMP_WITH_TIME_POS      42
+#define POS                	40
 #define TIME_FONT               "-*-helvetica-medium-r-*-*-10-*-*-*-*-*-*-*"
 #define AMPM_FONT               "-*-helvetica-medium-r-*-*-8-*-*-*-*-*-*-*"
 #define TEMP_FONT               "-*-helvetica-medium-r-*-*-18-*-*-*-*-*-*-*"
@@ -63,8 +63,9 @@
    void showErrorLed(bool show);
    void calcTimeDiff();
    void setTime(char* utcTime);
-   bool updateTemperture(ifstream& file);
+   bool updateTemperture(std::ifstream& file);
    void showLed(bool show);
+   std::string windRose(int angle);
 
    Display*  mDisplay;
    Window    mRoot;
@@ -73,12 +74,22 @@
    Window    mStatusLed;
    char*     mInstanceName;
    char*     mStationId;
+   char      mWind[10];
+   char      mWindUnit[5];
+   char      mPressure[6];
+   char      mPressureUnit[8];
    char      mTemperature[5];
+   char      mTemperatureWindChill[5];
+   char      mTemperatureUnit[10]; // because windchill
    char      mTime[6];
    char*     mTimeAMPM;
    double    mTimeDiff;
    bool      mFahrenheit;
+   bool      mMPH;
    bool      mShowTime;
+   bool      mShowPressure;
+   bool      mShowWind;
+   bool      mShowTemperatureWindChill;
    bool      mTime12HourFormat;
    bool      mVerbose;
 };
diff -Nur Temperature.app-1.4/Xpm.cc Temperature.app-1.4-frog/Xpm.cc
--- Temperature.app-1.4/Xpm.cc	2002-04-06 01:44:36.000000000 +0200
+++ Temperature.app-1.4-frog/Xpm.cc	2004-12-10 16:03:05.955385712 +0100
@@ -22,9 +22,9 @@
 #include <X11/Xlib.h>
 #include <X11/xpm.h>
 #include <X11/extensions/shape.h>
-#include <iostream.h>
-#include <stdlib.h>
-#include <string.h>
+#include <iostream>
+#include <cstdlib>
+#include <string>
 #include "Temperature.h"
 #include "Xpm.h"
 
@@ -39,22 +39,22 @@
 
    switch (error) {
    case XpmColorError:
-      cerr << APPNAME << ": xpm image loaded but did not get all colors needed" << endl;
+      std::cerr << APPNAME << ": xpm image loaded but did not get all colors needed" << std::endl;
       break;
 
    case XpmColorFailed:
-      cerr << APPNAME << ": could not load xpm image (not enough colors available)" << endl;
+      std::cerr << APPNAME << ": could not load xpm image (not enough colors available)" << std::endl;
       exit(0);
       break;
 
    case XpmNoMemory:
-      cerr << APPNAME << ": could not load xpm image (not enough memory available)" << endl;
+      std::cerr << APPNAME << ": could not load xpm image (not enough memory available)" << std::endl;
       exit(0);
       break;
 
    case XpmOpenFailed:
    case XpmFileInvalid:
-      cerr << APPNAME << ": could not load xpm image (image broken or corrupt)" << endl;
+      std::cerr << APPNAME << ": could not load xpm image (image broken or corrupt)" << std::endl;
       exit(0);
       break;
 
@@ -98,7 +98,7 @@
    XGCValues    gcv;
 
    if ((fontStruct = XLoadQueryFont(mDisplay, font)) == 0) {
-      cerr << APPNAME << ": could not load font '" << font << "'" << endl;
+      std::cerr << APPNAME << ": could not load font '" << font << "'" << std::endl;
       exit(0);
    }
    
@@ -124,12 +124,12 @@
    XGCValues    gcv;
 
    if ((fontStruct1 = XLoadQueryFont(mDisplay, font1)) == 0) {
-      cerr << APPNAME << ": could not load font '" << font1 << "'" << endl;
+      std::cerr << APPNAME << ": could not load font '" << font1 << "'" << std::endl;
       exit(0);
    }
 
    if ((fontStruct2 = XLoadQueryFont(mDisplay, font2)) == 0) {
-      cerr << APPNAME << ": could not load font '" << font2 << "'" << endl;
+      std::cerr << APPNAME << ": could not load font '" << font2 << "'" << std::endl;
       exit(0);
    }
    
