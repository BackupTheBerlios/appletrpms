--- src/afterstep/events.c	2013-05-01 08:34:11.000000000 -0500
+++ src/afterstep/events.c	2013-12-26 22:16:30.000000000 -0600
@@ -73,6 +73,7 @@
 			DispatchEvent (&event, False);
 			++handled_count;
 		}
+		asdbus_process_messages (0);
 		ASSync (False);
 		/* before we exec any function - we ought to process any Unmap and Destroy
 		 * events to handle all the pending window destroys : */
@@ -83,6 +84,7 @@
 			DispatchEvent (&event, False);
 			++handled_count;
 		}
+		asdbus_process_messages (0);
 		ExecutePendingFunctions ();
 	}
 	return handled_count;
@@ -1767,6 +1769,12 @@
 	struct timeval tv;
 	struct timeval *t = NULL;
 	int max_fd = 0;
+	ASVector *asdbus_fds = NULL;
+
+	if (ASDBusConnected)
+		asdbus_fds = asdbus_getFds();
+
+
 	LOCAL_DEBUG_OUT ("waiting pipes%s", "");
 	FD_ZERO (&in_fdset);
 	FD_ZERO (&out_fdset);
@@ -1776,7 +1784,21 @@
 #define AS_FD_SET(fd,fdset) \
 	do{ if (fd>=0) { FD_SET((fd),(fdset)); if ((fd)>max_fd) max_fd = (fd);}}while(0)
 
-	AS_FD_SET (ASDBus_fd, &in_fdset);
+	LOCAL_DEBUG_OUT ("asdbus_fds = %p", asdbus_fds);
+	if (asdbus_fds != NULL) {
+		register int i;
+		LOCAL_DEBUG_OUT ("asdbus_fds->used = %d", asdbus_fds->used);
+		for ( i = 0 ; i < asdbus_fds->used; ++i) {
+			ASDBusFd* fd = PVECTOR_HEAD(ASDBusFd*,asdbus_fds)[i];
+			LOCAL_DEBUG_OUT ("asdbus_fds[%d] = %p", i, fd);
+			if (fd && fd->readable){
+				AS_FD_SET (fd->fd, &in_fdset);
+				LOCAL_DEBUG_OUT ("adding asdbus_fds[%d].fd = %d", i, fd->fd);
+			}
+		}
+	}
+	LOCAL_DEBUG_OUT ("done with asdbus_fds", "");
+
 	AS_FD_SET (Module_fd, &in_fdset);
 
 	if (Modules != NULL) {				/* adding all the modules pipes to our wait list */
@@ -1802,7 +1824,7 @@
 		tv.tv_usec = 0;
 	}
 
-	LOCAL_DEBUG_OUT ("selecting ... ");
+	show_debug (__FILE__, __FUNCTION__, __LINE__,"selecting ... max_fd = %d, timeout : sec = %d, usec = %d", max_fd, t?t->tv_sec:-1, t?t->tv_usec:-1);
 	retval =
 			PORTABLE_SELECT (min (max_fd + 1, fd_width), &in_fdset, &out_fdset,
 											 NULL, t);
@@ -1827,11 +1849,21 @@
 				if (has_input || has_output)
 					HandleModuleInOut (i, has_input, has_output);
 			}
-		if (ASDBus_fd >= 0)
-			if (FD_ISSET (ASDBus_fd, &in_fdset))
-				asdbus_process_messages ();
+		if (asdbus_fds != NULL) {
+			register int i;
+			for ( i = 0 ; i < asdbus_fds->used; ++i) {
+				ASDBusFd* fd = PVECTOR_HEAD(ASDBusFd*,asdbus_fds)[i];
+				show_debug(__FILE__,__FUNCTION__,__LINE__, "dbus fd = %d, isset = %d", fd->fd, FD_ISSET (fd->fd, &in_fdset));
+				if (fd && FD_ISSET (fd->fd, &in_fdset)){
+					asdbus_process_messages (fd);
+					break;
+				}
+			}
+		}
 	}
 
 	/* handle timeout events */
 	timer_handle ();
+	asdbus_handleDispatches ();
+
 }
