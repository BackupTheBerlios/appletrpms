#!/usr/bin/perl

# for each target
#  * pull source from url to tarball - depends on tarball
#  * build srpm from tarball - depends on tarball, specfile
#  * build rpm from tarball - depends on tarball, specfile
#  * build meta files required - urpmi/apt-get etc
#  * build rpm dist
#  * build srpm dist

use strict;
use Data::Dumper;

our $SOURCES = "SOURCES";
our $SPECS = "SPECS";
our $RPMS = "RPMS";
our $SRPMS = "SRPMS";
our $RPM = "rpmbuild --define='_topdir $ENV{PWD}'";

my $target = shift;

$RPM .= with_flags();

my %map = build_target_map("include/as-apps.inc",
                           "include/wm-apps.inc",
                           "include/misc-apps.inc",
                           "include/core-apps.inc");

%map = interpolate_map(%map);

runtarget($target);

sub runtarget {
    unless(exists $map{uc $target} or
       $target =~ /^(clean|all|download|meta_rpm)/) {
        die "No such target $target";
    }
    
    if (exists $map{uc $target}) {
        make_target($target);
    } else {
        $target =~ /^clean$/ and make_clean();
        $target =~ /^all$/ and make_all();
        $target =~ /^download$/ and make_download();
        $target =~ /^meta_rpm$/ and make_meta_rpm();
    }
}

#########################################
#
#  make_all - loop through all build targets
#
#########################################

sub make_clean {
    system("rm -f $SOURCES/*tar.gz");
    system("rm -f $SRPMS/*.src.rpm");
    system("rm -f $RPMS/*/*rpm");
}
    
sub make_all {
    verbose("building all");
    for my $t (sort keys %map) {
        make_target($t);
    }
}

#########################################
#
# make_target - build 1 target by name
#              * dowload
#              * build srpm
#              * build rpm
#########################################

sub make_target {
    my $target = shift;
    verbose("",1); # we want seperation if more verbose
    verbose("building $target");
    make_download($target);
    unless(exists $map{uc $target}->{NOSPEC}) { 
        make_srpm($target);
        make_rpm($target);
    }
}

sub gen_syms {
    my $target = shift;
    my $n = $map{uc $target}->{NAME};
    my $v = $map{uc $target}->{VERSION};
    my $t = $map{uc $target}->{TAR};
    my $u = $map{uc $target}->{URL};
    return ($n, $v, $t, $u);
}

sub make_srpm {
    my $target = shift;
    my ($name, $version, $tar, $url) = gen_syms($target); 
    verbose("building srpm for $name",1);
    my $spec = "$SPECS/$name.spec";
    # need to add timing logic here
    if(check_deps("$SRPMS/$name*.src.rpm", 
                  $spec, "$SOURCES/$tar")) {
        system("$RPM -bs $spec");
    } else {
        verbose("  already latest version",1);
    }
    verbose("  done",1);
}

sub make_rpm {
    my $target = shift;
    my ($name, $version, $tar, $url) = gen_syms($target); 
    verbose("building rpm for $name",1);
    my $spec = "$SPECS/$name.spec";
    if(check_deps("$RPMS/*/$name*rpm", 
                  $spec, "$SOURCES/$tar")) {
        # need to add timing logic here
        !system("$RPM -bb $spec") or bail("failed to build $name rpm") ;
    } else {
        verbose("  already latest version",1);
    }
    verbose("  done",1);
}

sub make_download {
    my $target = shift;
    if(!$target) {
        for my $t (sort keys %map) {
            make_download($t);
        }
    } else {
        my $tar = $map{uc $target}->{TAR};
        my $url = $map{uc $target}->{URL};
        verbose("  downloading $tar from $url",1);
        if(!-e "$SOURCES/$tar" or
           system("tar -tzf $SOURCES/$tar >/dev/null")) {
            system("wget -O $SOURCES/$tar $url");
            verbose("  done",1);
        } else {
            verbose("  $SOURCES/$tar already exists",2);
        }
    }
}

sub interpolate_map {
    my %map = (@_);
    foreach my $key (sort keys %map) { 
        my $name = $key . "_NAME";
        my $version = $key . "_VERSION";
        my $tar = $key . "_TAR";

        $map{$key}->{TAR} =~ s/\$\($name\)/$map{$key}->{NAME}/g;
        $map{$key}->{TAR} =~ s/\$\($version\)/$map{$key}->{VERSION}/g;
        $map{$key}->{URL} =~ s/\$\($tar\)/$map{$key}->{TAR}/g;
        $map{$key}->{URL} =~ s/\$\($version\)/$map{$key}->{VERSION}/g;
        $map{$key}->{URL} =~ s/\$\($name\)/$map{$key}->{NAME}/g;
    }
    verbose("added make interpolation to target map",2);
    return %map;
}

sub build_target_map {
    my %map = ();
    my @files = @_;
    for my $file (@files) {
        open(IN, "<$file");
        while(<IN>) {
            if(/^\s*([^\#\s]+)_NAME\s*\=\s*(\S+)/) {
                $map{$1}->{NAME} = $2;
            }
            if(/^\s*([^\#\s]+)_VERSION\s*\=\s*(\S+)/) {
                $map{$1}->{VERSION} = $2;
            }
            if(/^\s*([^\#\s]+)_URL\s*\=\s*(\S+)/) {
                $map{$1}->{URL} = $2;
            }
            if(/^\s*([^\#\s]+)_TAR\s*\=\s*(\S+)/) {
                $map{$1}->{TAR} = $2;
            }
	    if(/^\s*([^\#\s]+)_NOSPEC\s*\=\s*(\S+)/) {
		$map{$1}->{NOSPEC} = $2;
	    }
        }
        close(IN);
    }
    verbose("built target map",2);
    return %map;
}

sub check_deps {
    my $target = shift;
    my @tmp = @_;
    
    my @targets = glob($target);
    #print "Targets: @targets\n";
    
    # glob of an array returns an array of arrays
    my @deps = ();
    for my $t (@tmp) {
        push @deps, glob($t);
    }

    if(!scalar(@targets) or !scalar(@deps)) {
        # we have no idea what is going on so we return fail
        return 1;
    }
    my $mtimet = 2000000000; # pretty close to 2038
    my $mtimed = 0;
    
    # this finds the oldest target
    for my $t (@targets) {
        my $m = (stat($t))[9];
        if($m < $mtimet) {
            $mtimet = $m;
        }
    }

    # this finds the youngest dep
    for my $d (@deps) {
        my $m = (stat($d))[9];
        if($m > $mtimed) {
            $mtimed = $m;
        }
    }
 
    if($mtimed >= $mtimet) {
        # a dep is younger than a target
        return 1;
    } else {
        return 0;
    }
}


sub make_meta_rpm {
    my ($y, $m, $d) = (gmtime(time()))[5,4,3];
    my $version = $y+1900 . $m + 1 . $d;
    my $requires = "";

    for my $key (sort keys %map) {
        $requires .= $map{$key}->{NAME} . " ";
    }
    open(OUT,">$SPECS/afterstep-apps.spec");
    print OUT <<END;
Summary: Applet Bundle
Name: afterstep-apps
Version: $version
Release: 1
License: Mixed OSS
Group: AfterStep/Applets
URL: http://www.afterstep.org
Requires: $requires
BuildRoot: \%{_tmppath}/afterstep-apps-root

%description
This is a meta package that requires all available other
applet rpms.

%files

END
    close(OUT);
    system("$RPM -bb $SPECS/afterstep-apps.spec");
}

sub with_flags() {
    if(-e "/etc/mandrake-release") {
        return " --with mandrake";
    }
    if(-e "/etc/redhat-release") {
        return " --with fedora";
    }
    return "";
}

sub bail {
    my $msg = shift;
    print STDERR "***********************************************************\n";
    print STDERR "********                 BUILD ERROR\n";
    print STDERR "********   $msg\n";
    print STDERR "***********************************************************\n";
    unless($ENV{FORCE}) {exit(1);}
}

sub verbose {
    my $msg = shift;
    my $level = shift;
    if($ENV{VERBOSE} >= $level) {
        print STDERR "$msg\n";
    }
}
